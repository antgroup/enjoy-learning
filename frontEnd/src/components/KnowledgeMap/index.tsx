import React, { useState, useEffect, useRef } from 'react';
import * as echarts from 'echarts';
import { knowledgeTreeApi } from '../../api/index';
import './index.css';

interface KnowledgeNode {
  id: string;
  name: string;
  category: string;
  value: number;
  symbolSize: number;
  itemStyle: {
    color: string;
  };
  label: {
    show: boolean;
  };
  // 原始数据
  nodeId?: string;
  description?: string;
  progress?: number;
  keywords?: string[];
  associatedNotesCount?: number;
  isAutoGenerated?: boolean;
  level?: number;
}

interface KnowledgeLink {
  source: string;
  target: string;
  lineStyle: {
    color: string;
    width: number;
  };
}

const KnowledgeMap: React.FC = () => {
  const chartRef = useRef<HTMLDivElement>(null);
  const chartInstanceRef = useRef<echarts.ECharts | null>(null);
  const [selectedNode, setSelectedNode] = useState<any>(null);
  const [showNodeDetail, setShowNodeDetail] = useState(false);
  const [loading, setLoading] = useState(true);
  const [currentTreeId, setCurrentTreeId] = useState<number | null>(null);
  const [treeListLoading, setTreeListLoading] = useState(true);

  // 获取层级颜色
  const getColorByLevel = (level: number, isAutoGenerated: boolean = false): string => {
    const colors = [
      '#ff6b6b',  // 根节点 - 亮红色
      '#51cf66',  // 第一层 - 亮绿色
      '#74c0fc',  // 第二层 - 亮蓝色
      '#ffd43b',  // 第三层 - 亮黄色
      '#da77f2',  // 第四层 - 亮紫色
      '#22d3ee',  // 第五层 - 亮青色
    ];
    
    let color = colors[level % colors.length];
    
    // AI自动生成的节点使用稍微暗一些的颜色
    if (isAutoGenerated) {
      // 将颜色调暗
      color = color.replace('#', '#') + '80'; // 添加透明度
    }
    
    return color;
  };

  // 将树形数据转换为力向图数据
  const convertToForceData = (node: any, level: number = 0, parentId?: string): { nodes: KnowledgeNode[], links: KnowledgeLink[] } => {
    const nodes: KnowledgeNode[] = [];
    const links: KnowledgeLink[] = [];
    
    const nodeId = node.nodeId || `${level}_${node.name}`;
    
    const forceNode: KnowledgeNode = {
      id: nodeId,
      name: node.name || '未命名节点',
      category: `第${level}层`,
      value: node.progress || 0,
      symbolSize: level === 0 ? 60 : Math.max(30, 50 - level * 5), // 根节点更大
      itemStyle: {
        color: getColorByLevel(level, node.isAutoGenerated)
      },
      label: {
        show: true
      },
      // 保存原始数据
      nodeId: node.nodeId,
      description: node.description || '',
      progress: node.progress || 0,
      keywords: node.keywords || [],
      associatedNotesCount: node.associatedNotesCount || 0,
      isAutoGenerated: node.isAutoGenerated || false,
      level
    };

    nodes.push(forceNode);

    // 如果有父节点，创建连接
    if (parentId) {
      const link: KnowledgeLink = {
        source: parentId,
        target: nodeId,
        lineStyle: {
          color: '#999',
          width: Math.max(1, 3 - level * 0.5)
        }
      };
      links.push(link);
    }

    // 处理子节点
    if (node.children && node.children.length > 0) {
      node.children.forEach((child: any) => {
        const childData = convertToForceData(child, level + 1, nodeId);
        nodes.push(...childData.nodes);
        links.push(...childData.links);
      });
    }

    return { nodes, links };
  };

  // 获取知识树列表并设置当前树ID
  const loadTreeList = async () => {
    try {
      setTreeListLoading(true);
      console.log('🗺️ 开始获取知识树列表...');
      const response = await knowledgeTreeApi.getTreeList();
      
      console.log('🗺️ 知识树列表响应:', response);
      
      if (response.data && Array.isArray(response.data) && response.data.length > 0) {
        // 使用第一个知识树的ID
        const firstTree = response.data[0];
        // @ts-ignore
        setCurrentTreeId(firstTree.treeIdStr);
        console.log('🗺️ 获取到知识树列表，使用第一个树ID:', firstTree.treeIdStr, '树名称:', firstTree.name);
      } else {
        console.warn('⚠️ 没有找到可用的知识树，响应数据:', response);
        setCurrentTreeId(null);
      }
    } catch (error) {
      console.error('❌ 获取知识树列表失败:', error);
      // 如果获取失败，回退到默认值
      console.log('🔄 回退到默认树ID: 1');
      setCurrentTreeId(1);
    } finally {
      setTreeListLoading(false);
    }
  };

  // 创建测试数据
  const createTestData = (): { nodes: KnowledgeNode[], links: KnowledgeLink[] } => {
    const nodes: KnowledgeNode[] = [
      {
        id: 'test_root',
        name: '测试根节点',
        category: '第0层',
        value: 80,
        symbolSize: 60,
        itemStyle: { color: '#ff6b6b' },
        label: { show: true },
        description: '这是一个测试根节点',
        progress: 80,
        keywords: ['测试', '根节点'],
        associatedNotesCount: 5,
        isAutoGenerated: false,
        level: 0
      },
      {
        id: 'test_child1',
        name: '算法基础',
        category: '第1层',
        value: 60,
        symbolSize: 45,
        itemStyle: { color: '#51cf66' },
        label: { show: true },
        description: '算法基础知识',
        progress: 60,
        keywords: ['算法', '基础'],
        associatedNotesCount: 3,
        isAutoGenerated: false,
        level: 1
      },
      {
        id: 'test_child2',
        name: '数据结构',
        category: '第1层',
        value: 40,
        symbolSize: 45,
        itemStyle: { color: '#51cf66' },
        label: { show: true },
        description: '数据结构相关知识',
        progress: 40,
        keywords: ['数据结构'],
        associatedNotesCount: 2,
        isAutoGenerated: true,
        level: 1
      },
      {
        id: 'test_child3',
        name: '编程语言',
        category: '第1层',
        value: 70,
        symbolSize: 45,
        itemStyle: { color: '#51cf66' },
        label: { show: true },
        description: '编程语言学习',
        progress: 70,
        keywords: ['编程', '语言'],
        associatedNotesCount: 4,
        isAutoGenerated: false,
        level: 1
      },
      {
        id: 'test_grandchild1',
        name: '排序算法',
        category: '第2层',
        value: 30,
        symbolSize: 40,
        itemStyle: { color: '#74c0fc' },
        label: { show: true },
        description: '各种排序算法',
        progress: 30,
        keywords: ['排序', '算法'],
        associatedNotesCount: 1,
        isAutoGenerated: true,
        level: 2
      }
    ];

    const links: KnowledgeLink[] = [
      {
        source: 'test_root',
        target: 'test_child1',
        lineStyle: { color: '#999', width: 2.5 }
      },
      {
        source: 'test_root',
        target: 'test_child2',
        lineStyle: { color: '#999', width: 2.5 }
      },
      {
        source: 'test_root',
        target: 'test_child3',
        lineStyle: { color: '#999', width: 2.5 }
      },
      {
        source: 'test_child1',
        target: 'test_grandchild1',
        lineStyle: { color: '#999', width: 2 }
      }
    ];

    return { nodes, links };
  };

  // 初始化echarts
  const initChart = () => {
    if (!chartRef.current) {
      console.warn('⚠️ chartRef.current 为空，无法初始化图表');
      return;
    }

    console.log('📊 开始初始化echarts力向图...');

    // 销毁之前的图表实例
    if (chartInstanceRef.current) {
      chartInstanceRef.current.dispose();
    }

    // 创建新的图表实例
    const chart = echarts.init(chartRef.current);
    chartInstanceRef.current = chart;

    // 添加测试数据
    const testData = createTestData();
    updateChart(testData.nodes, testData.links);

    // 监听点击事件
    chart.on('click', (params: any) => {
      if (params.dataType === 'node') {
        console.log('🖱️ 点击节点:', params.data.name);
        setSelectedNode(params.data);
        setShowNodeDetail(true);
      }
    });

    // 监听窗口大小变化
    const handleResize = () => {
      chart.resize();
    };

    window.addEventListener('resize', handleResize);

    console.log('📊 echarts力向图初始化完成');

    return () => {
      window.removeEventListener('resize', handleResize);
      chart.dispose();
    };
  };

  // 更新图表数据
  const updateChart = (nodes: KnowledgeNode[], links: KnowledgeLink[]) => {
    if (!chartInstanceRef.current) {
      console.warn('⚠️ 图表实例不存在，无法更新数据');
      return;
    }

    console.log('📊 更新图表数据，节点数量:', nodes.length, '连接数量:', links.length);

    const option = {
      title: {
        text: '知识地图',
        left: 'center',
        top: 20,
        textStyle: {
          color: '#333',
          fontSize: 18,
          fontWeight: 'bold'
        }
      },
      tooltip: {
        trigger: 'item',
        formatter: (params: any) => {
          if (params.dataType === 'node') {
            const data = params.data;
            return `
              <div style="padding: 10px;">
                <div style="font-weight: bold; margin-bottom: 5px;">${data.name}</div>
                <div>层级: ${data.category}</div>
                <div>进度: ${data.progress || 0}%</div>
                <div>关联笔记: ${data.associatedNotesCount || 0} 篇</div>
                <div>生成方式: ${data.isAutoGenerated ? 'AI自动生成' : '手动创建'}</div>
              </div>
            `;
          }
          return '';
        }
      },
      legend: {
        show: false
      },
      series: [
        {
          name: '知识地图',
          type: 'graph',
          layout: 'force',
          data: nodes,
          links: links,
          categories: [
            { name: '第0层' },
            { name: '第1层' },
            { name: '第2层' },
            { name: '第3层' },
            { name: '第4层' },
            { name: '第5层' }
          ],
          roam: true, // 允许缩放和平移
          focusNodeAdjacency: true, // 鼠标悬停时高亮相邻节点
          draggable: true, // 允许拖拽节点
          symbol: 'circle',
          symbolSize: (value: any, params: any) => {
            return params.data.symbolSize;
          },
          label: {
            show: true,
            position: 'inside',
            fontSize: 12,
            fontWeight: 'bold',
            color: '#fff',
            formatter: (params: any) => {
              // 根据节点大小调整文字显示
              if (params.data.symbolSize > 50) {
                return params.data.name;
              } else if (params.data.symbolSize > 35) {
                return params.data.name.length > 4 ? params.data.name.substring(0, 4) + '...' : params.data.name;
              } else {
                return params.data.name.length > 2 ? params.data.name.substring(0, 2) + '...' : params.data.name;
              }
            }
          },
          edgeSymbol: ['none', 'arrow'],
          edgeSymbolSize: [0, 8],
          force: {
            repulsion: 1000, // 节点间斥力
            gravity: 0.1, // 向心力
            edgeLength: [100, 200], // 边长度
            layoutAnimation: true
          },
          lineStyle: {
            color: 'source',
            curveness: 0.1,
            opacity: 0.6
          },
          emphasis: {
            focus: 'adjacency',
            lineStyle: {
              width: 3
            }
          }
        }
      ]
    };

    chartInstanceRef.current.setOption(option, true);
    console.log('✅ 图表数据更新完成');
  };

  // 加载知识树数据
  const loadTreeData = async () => {
    if (!currentTreeId) {
      console.warn('⚠️ 没有可用的知识树ID');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      console.log('📊 开始加载知识树数据，树ID:', currentTreeId);
      
      const response = await knowledgeTreeApi.getTreeData(currentTreeId, true);
      
      console.log('📊 知识树数据响应:', response);
      
      if (response.data && response.data.tree) {
        console.log('✅ 知识树数据加载成功:', response.data);
        
        // 转换数据
        const forceData = convertToForceData(response.data.tree);
        console.log('🔄 转换后的力向图数据:', forceData);

        // 更新图表
        updateChart(forceData.nodes, forceData.links);
      } else {
        console.warn('⚠️ 知识树数据加载失败，使用测试数据');
        // 如果API数据加载失败，使用测试数据
        const testData = createTestData();
        updateChart(testData.nodes, testData.links);
      }
    } catch (error) {
      console.error('❌ 加载知识树数据失败:', error);
      // 出错时使用测试数据
      const testData = createTestData();
      updateChart(testData.nodes, testData.links);
    } finally {
      setLoading(false);
    }
  };

  // 组件挂载时初始化
  useEffect(() => {
    console.log('🚀 知识地图组件挂载，开始初始化...');
    loadTreeList();
  }, []);

  // 当获取到知识树ID后，初始化图表并加载数据
  useEffect(() => {
    if (currentTreeId && !treeListLoading) {
      console.log('🎯 触发初始化图表，currentTreeId:', currentTreeId, 'treeListLoading:', treeListLoading);
      
      // 初始化图表
      const cleanup = initChart();
      
      // 延迟加载数据，确保图表初始化完成
      setTimeout(() => {
        loadTreeData();
      }, 100);

      return cleanup;
    }
  }, [currentTreeId, treeListLoading]);

  // 清理函数
  useEffect(() => {
    return () => {
      console.log('🧹 知识地图组件卸载，清理资源...');
      if (chartInstanceRef.current) {
        chartInstanceRef.current.dispose();
      }
    };
  }, []);

  // 关闭详情面板
  const closeNodeDetail = () => {
    setShowNodeDetail(false);
    setSelectedNode(null);
  };

  // 重置地图位置
  const resetMapPosition = () => {
    if (chartInstanceRef.current) {
      // 重置缩放和平移
      chartInstanceRef.current.dispatchAction({
        type: 'restore'
      });
    }
  };

  if (loading || treeListLoading) {
    return (
      <div className="knowledge-map-container">
        <div className="loading-state">
          <div className="spinner"></div>
          <div>加载知识地图...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="knowledge-map-container">
      {/* 地图区域 */}
      <div className="map-container">
        <div 
          ref={chartRef} 
          className="knowledge-map-chart"
          style={{ width: '100%', height: '100%' }}
        />

        {/* 地图控制按钮 */}
        <div className="map-controls">
          <button className="control-btn reset" onClick={resetMapPosition} title="重置视图">
            ↺
          </button>
        </div>
      </div>

      {/* 知识点详情弹窗 */}
      <div className={`node-detail ${showNodeDetail ? 'show' : ''}`}>
        <div className="drag-handle"></div>
        <div className="node-header">
          <h2>{selectedNode?.name}</h2>
          <button className="detail-close" onClick={closeNodeDetail}>
            ×
          </button>
        </div>
        <p>{selectedNode?.description}</p>
        
        <div className="progress-box">
          <h4>学习进度</h4>
          <div className="progress mt-8">
            <div 
              className="progress-bar" 
              style={{ width: `${selectedNode?.progress || 0}%` }}
            ></div>
          </div>
          <p className="text-sm mt-8">
            智慧值：{selectedNode?.progress || 0}/100
          </p>
        </div>

        <div className="node-details-info">
          <div className="info-item">
            <span className="info-label">层级:</span>
            <span className="info-value">{selectedNode?.category}</span>
          </div>
          <div className="info-item">
            <span className="info-label">关联笔记:</span>
            <span className="info-value">{selectedNode?.associatedNotesCount || 0} 篇</span>
          </div>
          <div className="info-item">
            <span className="info-label">生成方式:</span>
            <span className="info-value">{selectedNode?.isAutoGenerated ? 'AI自动生成' : '手动创建'}</span>
          </div>
        </div>

        {selectedNode?.keywords && selectedNode.keywords.length > 0 && (
          <div className="node-keywords">
            <div className="keywords-label">关键词:</div>
            <div className="keywords-list">
              {selectedNode.keywords.map((keyword: string, index: number) => (
                <span key={index} className="keyword-tag">{keyword}</span>
              ))}
            </div>
          </div>
        )}
        
        <div className="action-buttons">
          <button className="btn btn-primary">复习</button>
          <button className="btn btn-outline">笔记</button>
          <button className="btn btn-outline">探索</button>
        </div>
      </div>
    </div>
  );
};

export default KnowledgeMap;
