import { useState, useEffect } from 'react';
import { knowledgeTreeApi, TreeNode, KnowledgeTreeDataResponse, notesApi } from '../../api/index';
import { TreeNodeData } from './types';

export const useKnowledgeTree = () => {
  // 基础状态
  const [searchTerm, setSearchTerm] = useState('');
  const [treeData, setTreeData] = useState<TreeNodeData | null>(null);
  const [loading, setLoading] = useState(true);
  const [treeInfo, setTreeInfo] = useState<KnowledgeTreeDataResponse | null>(null);
  
  // 文档相关状态
  const [showDocumentList, setShowDocumentList] = useState(false);
  const [documentsLoading, setDocumentsLoading] = useState(false);
  const [apiResponse, setApiResponse] = useState<any>(null);
  const [associating, setAssociating] = useState(false);

  // 动态获取的知识树ID
  const [currentTreeId, setCurrentTreeId] = useState<number | null>(null);

  // 当前节点id
  const [currentNodeId, setCurrentNodeId] = useState<string>('');
  const [treeListLoading, setTreeListLoading] = useState(true);

  // 获取层级颜色
  const getColorByLevel = (level: number, isAutoGenerated: boolean = false): string => {
    const colors = [
      "#1890ff", // 根节点 - 蓝色
      "#52c41a", // 第一层 - 绿色
      "#fa8c16", // 第二层 - 橙色
      "#722ed1", // 第三层 - 紫色
      "#eb2f96", // 第四层 - 粉色
      "#13c2c2", // 第五层 - 青色
    ];
    
    let color = colors[level % colors.length];
    
    // AI自动生成的节点使用稍微透明的颜色
    if (isAutoGenerated) {
      color = color + 'CC'; // 添加透明度
    }
    
    return color;
  };

  // 转换API数据为ECharts树图格式
  const convertToTreeData = (node: any): TreeNodeData => {
    const treeNode: TreeNodeData = {
      name: node.name || '未命名节点',
      value: node.progress || 0,
      nodeId: node.nodeId,
      level: node.level || 0,
      progress: node.progress || 0,
      description: node.description || '',
      keywords: node.keywords || [],
      associatedNotesCount: node.associatedNotesCount || 0,
      isAutoGenerated: node.isAutoGenerated || false,
      itemStyle: {
        color: getColorByLevel(node.level || 0, node.isAutoGenerated || false),
        borderColor: '#fff',
        borderWidth: 2
      }
    };

    if (node.children && Array.isArray(node.children) && node.children.length > 0) {
      treeNode.children = node.children.map((child: any) => convertToTreeData(child));
    }

    return treeNode;
  };

  // 获取知识树列表并设置当前树ID
  const loadTreeList = async () => {
    try {
      setTreeListLoading(true);
      console.log('开始获取知识树列表...');
      const response = await knowledgeTreeApi.getTreeList();
      
      console.log('知识树列表响应:', response);
      
      if (response.data && Array.isArray(response.data) && response.data.length > 0) {
        // 使用第一个知识树的ID
        const firstTree = response.data[0];
        // @ts-ignore
        setCurrentTreeId(firstTree.treeIdStr);
        console.log('获取到知识树列表，使用第一个树ID:', firstTree.treeIdStr, '树名称:', firstTree.name);
      } else {
        console.warn('没有找到可用的知识树，响应数据:', response);
        setCurrentTreeId(null);
      }
    } catch (error) {
      console.error('获取知识树列表失败:', error);
      // 如果获取失败，回退到默认值
      console.log('回退到默认树ID: 1');
      setCurrentTreeId(1);
    } finally {
      setTreeListLoading(false);
    }
  };

  // 加载知识树数据
  const loadTreeData = async () => {
    if (!currentTreeId) {
      console.warn('没有可用的知识树ID');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      console.log('开始加载知识树数据，树ID:', currentTreeId);
      
      const response = await knowledgeTreeApi.getTreeData(currentTreeId, true);
      
      console.log('知识树数据响应:', response);
      
      // 检查响应结构
      if (!response) {
        console.warn('响应为空');
        return;
      }
      
      if (response.data) {
        console.log('知识树数据加载成功:', response.data);
        setTreeInfo(response.data);
        
        if (response.data.tree) {
          const convertedData = convertToTreeData(response.data.tree);
          console.log('转换后的树数据:', convertedData);
          setTreeData(convertedData);
        } else {
          console.warn('响应数据中没有tree字段');
        }
      } else {
        console.warn('知识树数据加载失败，响应不成功:', response);
      }
    } catch (error) {
      console.error('加载知识树数据失败:', error);
    } finally {
      setLoading(false);
    }
  };

  // 重新初始化图表数据
  const handleHomeClick = async () => {
    console.log('点击Home按钮，重新初始化图表数据');
    await loadTreeData();
  };

  // 加载文档列表
  const loadDocuments = async () => {
    try {
      setDocumentsLoading(true);
      
      // 使用和笔记页面相同的接口调用方式
      const response = await notesApi.getNoteList('', 1, 50);
      
      // 保存完整的API响应用于调试显示
      setApiResponse(response);
      
    } catch (error: any) {
      console.error('获取文档列表失败:', error);
      setApiResponse({ error: error.message });
    } finally {
      setDocumentsLoading(false);
    }
  };

  // 处理文档按钮点击
  const handleDocumentButtonClick = async () => {
    if (!showDocumentList) {
      // 如果文档列表未显示，则加载文档并显示
      await loadDocuments();
    }
    setShowDocumentList(!showDocumentList);
  };

  // 处理文档选择 - 调用关联接口
  const handleDocumentSelect = async (document: any) => {
    if (!currentTreeId) {
      alert('没有可用的知识树ID');
      return;
    }

    try {
      setAssociating(true);
      
      // 根据接口文档调用关联接口
      const response = await knowledgeTreeApi.associateNotes({
        treeId: currentTreeId, // 使用动态获取的树ID
        noteIds: [document.id], // 选中的文档ID
        associationMode: 'auto', // 默认值
        overrideExisting: false // 默认值
      });
      
      alert('正在构建知识网络，请稍候......');
      
      // 关联成功后关闭文档模态框
      setShowDocumentList(false);
      
    } catch (error: any) {
      console.error('文档关联失败:', error);
      alert('文档关联失败，请重试');
    } finally {
      setAssociating(false);
    }
  };

  // 处理搜索
  const handleSearch = async (term: string) => {
    setSearchTerm(term);
    
    if (!term.trim()) {
      return;
    }

    if (!currentTreeId) {
      console.warn('没有可用的知识树ID进行搜索');
      return;
    }

    try {
      const response = await knowledgeTreeApi.searchNodes(currentTreeId, term);
      if (response.success && response.code === 200) {
        console.log('搜索成功');
      }
    } catch (error) {
      console.error('搜索失败:', error);
    }
  };

  // 显示节点详情
  const showNodeDetails = (nodeData: any) => {
    const details = document.querySelector('.node-details');
    const title = document.querySelector('.node-details-title');
    const level = document.querySelector('.node-details-level');
    const description = document.querySelector('.node-details-description');
    const progressValue = document.querySelector('.progress-value');
    const progressText = document.querySelector('.progress-label span:last-child');
    const keywords = document.querySelector('.node-keywords');
    const notesCount = document.querySelector('.notes-count');
    const autoGenerated = document.querySelector('.auto-generated');

    if (title) title.textContent = nodeData.name;
    if (level) level.textContent = `第 ${nodeData.level || 0} 层`;
    if (description) description.textContent = nodeData.description || '暂无描述';
    
    if (progressValue && progressText) {
      const progress = nodeData.progress || 0;
      (progressValue as HTMLElement).style.width = `${progress}%`;
      (progressText as HTMLElement).textContent = `${progress}%`;
    }

    if (keywords) {
      keywords.innerHTML = '';
      if (nodeData.keywords && nodeData.keywords.length > 0) {
        nodeData.keywords.forEach((keyword: string) => {
          const span = document.createElement('span');
          span.className = 'keyword-tag';
          span.textContent = keyword;
          keywords.appendChild(span);
        });
      } else {
        const span = document.createElement('span');
        span.className = 'keyword-tag';
        span.textContent = '暂无关键词';
        keywords.appendChild(span);
      }
    }

    if (notesCount) {
      notesCount.textContent = `关联笔记: ${nodeData.associatedNotesCount || 0} 篇`;
    }

    if (autoGenerated) {
      autoGenerated.textContent = nodeData.isAutoGenerated ? 'AI自动生成' : '手动创建';
      autoGenerated.className = `auto-generated ${nodeData.isAutoGenerated ? 'ai' : 'manual'}`;
    }

    details?.classList.add('show');
  };

  // 关闭节点详情
  const closeNodeDetails = () => {
    const details = document.querySelector('.node-details');
    details?.classList.remove('show');
  };

  // 处理详情按钮点击
  const handleDetailsClick = () => {
    console.log('点击了详情按钮');
    // 这里可以添加跳转到详情页面的逻辑
    // 例如：window.open('/node-detail', '_blank');
    alert('详情功能待实现');
  };

  // 初始化 - 先获取知识树列表
  useEffect(() => {
    loadTreeList();
  }, []);

  // 当获取到知识树ID后，加载知识树数据
  useEffect(() => {
    if (currentTreeId && !treeListLoading) {
      console.log('触发加载知识树数据，currentTreeId:', currentTreeId, 'treeListLoading:', treeListLoading);
      loadTreeData();
    }
  }, [currentTreeId, treeListLoading]);

  const getTreeDetailByTreeIdAndNodeId = async () => {
    return await knowledgeTreeApi.getTreeDetailByTreeIdAndNodeId({treeId: currentTreeId, nodeId: currentNodeId})
  }

  return {
    // 状态
    searchTerm,
    treeData,
    loading,
    treeInfo,
    showDocumentList,
    documentsLoading,
    apiResponse,
    associating,
    currentTreeId,
    treeListLoading,
    currentNodeId, 
    
    // 方法
    setCurrentNodeId,
    handleSearch,
    handleHomeClick,
    handleDocumentButtonClick,
    handleDocumentSelect,
    showNodeDetails,
    closeNodeDetails,
    handleDetailsClick,
    setShowDocumentList,
    loadTreeData,
    setTreeData,
    getTreeDetailByTreeIdAndNodeId
  };
};
