// API接口统一管理
import request, { get, post, put, del, upload, tokenUtils } from '../utils/request';

// 定义API响应的通用类型（根据接口文档）
export interface ApiResponse<T = any> {
  code: string; // 状态码，00000表示成功
  userHint: string; // 用户提示信息
  errorMessage?: string; // 错误信息，仅在出错时返回
  data: T; // 响应数据
}

// 知识树接口专用响应类型（根据知识树接口文档）
export interface KnowledgeTreeApiResponse<T = any> {
  success: boolean; // 是否成功
  code: number; // 状态码，200表示成功
  message: string; // 响应消息
  data: T; // 响应数据
}

// 登录请求参数类型
export interface LoginRequest {
  account: string; // 用户账号
  password: string; // 用户密码
  username?: string; // 用户名，仅在首次登录(注册)时有效
}

// 登录响应数据类型
export interface LoginResponse {
  success: boolean; // 是否成功
  isNewUser: boolean; // 是否为新用户（首次登录）
  token: string; // 登录令牌
  userId: string; // 用户ID
  username: string; // 用户名
  account: string; // 用户账号
}

// 用户信息类型
export interface UserInfo {
  id: string; // 用户ID
  username: string; // 用户名
  account: string; // 账号
  status: string; // 用户状态
  createdAt: string; // 创建时间
  updatedAt: string; // 更新时间
}

// 笔记相关类型定义
export interface CreateNoteRequest {
  title?: string; // 笔记标题，可选
  content: string; // 笔记内容，必填
  tags?: string[]; // 标签列表，可选
  relatedKnowledgePoints?: string[]; // 关联知识点ID列表，可选
  learningMethod?: 'reading' | 'practice' | 'hands-on' | 'creation'; // 学习方式，可选
}

export interface CreateNoteResponse {
  noteId: string; // 笔记ID
  title: string; // 笔记标题
  analysisStatus: string; // 分析状态
  estimatedTime: number; // 预计完成分析的时间（秒）
}

export interface UploadNoteRequest {
  title: string; // 笔记标题
  file: File; // txt文件
  tags?: string[]; // 标签列表，可选
  subject?: string; // 学科领域，可选
}

export interface UploadNoteResponse {
  noteId: string; // 笔记ID
  title: string; // 笔记标题
  status: string; // 处理状态
  aiTaskId: string; // AI任务ID
  uploadTime: string; // 上传时间
  estimatedAnalysisTime: string; // 预计分析时间
}

export interface NoteAnalysisResponse {
  noteId: string;
  status: string; // completed, pending, failed
  outline?: {
    title: string;
    summary: string;
    mainPoints: string[];
  };
  knowledgePoints?: Array<{
    name: string;
    category: string;
    description: string;
    keywords: string[];
    difficulty: string;
    importance: string;
  }>;
  analysisTime?: string;
}

export interface NoteListItem {
  noteId: string;
  title: string;
  status: string;
  tags: string[];
  knowledgePointCount: number;
  uploadTime: string;
  analysisTime?: string;
}

export interface NoteListResponse {
  total: number;
  list: NoteListItem[];
}

export interface NoteDetail {
  noteId: string;
  title: string;
  rawContent: string; // 原始内容，markdown格式
  status: string;
  tags: string[];
  uploadTime: string;
  analysisTime?: string;
  knowledgePointCount: number;
  outline?: {
    title: string;
    summary: string;
    mainPoints: string[];
  };
  knowledgePoints?: Array<{
    name: string;
    category: string;
    description: string;
    keywords: string[];
    difficulty: string;
    importance: string;
  }>;
}

// 知识树相关类型定义
export interface AssociatedNoteInfo {
  noteId: number;
  title: string;
  relevanceScore: number;
  associatedKnowledgePoints: string[];
}

export interface TreeNode {
  nodeId: string;
  name: string;
  level: number;
  progress: number;
  description: string;
  keywords: string[];
  associatedNotesCount: number;
  isAutoGenerated: boolean;
  sourceNoteIds: number[];
  associatedNotes: AssociatedNoteInfo[];
  children: TreeNode[];
}

export interface KnowledgeTreeDataResponse {
  treeId: number;
  name: string;
  lastUpdateTime: string;
  totalNodes: number;
  associatedNotesCount: number;
  tree: TreeNode;
}

export interface KnowledgeTreeListItem {
  id: string;
  treeId: number;
  treeIdStr: string;
  userId: string;
  name: string;
  description: string;
  category: string;
  rootNodeId: string;
  totalNodes: number;
  maxDepth: number;
  associatedNotesCount: number;
  lastUpdateTime: string;
  createdAt: string;
  updatedAt: string;
}

export interface SearchNodeResult {
  nodeId: string;
  name: string;
  level: number;
  progress: number;
  description: string;
  keywords: string[];
  associatedNotesCount: number;
  isAutoGenerated: boolean;
  sourceNoteIds: number[];
  associatedNotes: AssociatedNoteInfo[];
  children: TreeNode[];
}

// 用户相关API
export const userApi = {
  // 用户登录/注册
  login: (data: LoginRequest) => {
    return post<ApiResponse<LoginResponse>>('/api/auth/login', data);
  },
  
  // 获取当前用户信息
  getUserInfo: () => {
    return get<ApiResponse<UserInfo>>('/api/auth/me');
  },
  
  // 用户登出
  logout: () => {
    return post<ApiResponse<boolean>>('/auth/logout');
  },
};

// 笔记相关API
export const notesApi = {
  // 创建文字笔记
  createNote: (data: CreateNoteRequest) => {
    return post<ApiResponse<CreateNoteResponse>>('/api/notes', data);
  },
  
  // 上传文件笔记
  uploadNote: (data: UploadNoteRequest) => {
    const formData = new FormData();
    formData.append('title', data.title);
    formData.append('file', data.file);
    if (data.tags) {
      formData.append('tags', JSON.stringify(data.tags));
    }
    if (data.subject) {
      formData.append('subject', data.subject);
    }
    return upload<ApiResponse<UploadNoteResponse>>('/api/notes/upload', formData);
  },
  
  // 获取笔记分析结果
  getNoteAnalysis: (noteId: string, userId: string) => {
    return get<ApiResponse<NoteAnalysisResponse>>(`/api/notes/${noteId}/analysis?userId=${userId}`);
  },
  
  // 获取笔记列表 - 根据接口文档更新
  getNoteList: (userId: string, page: number = 1, size: number = 10, status?: string) => {
    const params = new URLSearchParams({
      userId: userId,
      page: page.toString(),
      size: size.toString(),
    });
    if (status) {
      params.append('status', status);
    }
    return get<ApiResponse<NoteListResponse>>(`/api/notes/list?${params.toString()}`);
  },
  
  // 获取笔记详情
  getNoteDetail: (noteId: string, userId: string) => {
    return get<ApiResponse<NoteDetail>>(`/api/notes/${noteId}?userId=${userId}`);
  },
  
  // 删除笔记
  deleteNote: (noteId: string) => {
    return del<ApiResponse<boolean>>(`/api/notes/${noteId}`);
  },
  
  // 更新笔记
  updateNote: (noteId: string, data: Partial<CreateNoteRequest>) => {
    return put<ApiResponse<any>>(`/api/notes/${noteId}`, data);
  },
};

// 知识地图相关API
export const knowledgeMapApi = {
  // 获取知识地图数据
  getMapData: (userId: string) => {
    return get<ApiResponse<any>>(`/knowledge-map/${userId}`);
  },
  
  // 更新知识点状态
  updateNodeStatus: (nodeId: string, status: string) => {
    return put<ApiResponse<any>>(`/knowledge-map/node/${nodeId}/status`, { status });
  },
  
  // 获取知识点详情
  getNodeDetail: (nodeId: string) => {
    return get<ApiResponse<any>>(`/knowledge-map/node/${nodeId}`);
  },
};

// 知识树相关API
export const knowledgeTreeApi = {
  // 获取用户知识树列表
  getTreeList: () => {
    return get<KnowledgeTreeApiResponse<KnowledgeTreeListItem[]>>('/api/knowledge-tree/list');
  },
  
  // 获取知识树详细数据
  getTreeData: (treeId: number, includeNoteInfo: boolean = false, maxDepth?: number) => {
    const params = new URLSearchParams();
    if (includeNoteInfo) {
      params.append('includeNoteInfo', 'true');
    }
    if (maxDepth !== undefined) {
      params.append('maxDepth', maxDepth.toString());
    }
    const queryString = params.toString();
    const url = `/api/knowledge-tree/${treeId}${queryString ? `?${queryString}` : ''}`;
    return get<KnowledgeTreeApiResponse<KnowledgeTreeDataResponse>>(url);
  },
  
  // 创建知识树
  createTree: (data: { name: string; description?: string }) => {
    return post<KnowledgeTreeApiResponse<KnowledgeTreeListItem>>('/api/knowledge-tree/create', data);
  },
  
  // 删除知识树
  deleteTree: (treeId: number) => {
    return del<KnowledgeTreeApiResponse<string>>(`/api/knowledge-tree/${treeId}`);
  },
  
  // 搜索知识树节点
  searchNodes: (treeId: number, keyword: string) => {
    return get<KnowledgeTreeApiResponse<SearchNodeResult[]>>(`/api/knowledge-tree/${treeId}/search?keyword=${encodeURIComponent(keyword)}`);
  },
  
  // 获取知识树统计信息
  getTreeStatistics: (treeId: number) => {
    return get<KnowledgeTreeApiResponse<{
      treeId: number;
      name: string;
      totalNodes: number;
      associatedNotesCount: number;
      lastUpdateTime: string;
    }>>(`/api/knowledge-tree/${treeId}/statistics`);
  },
  
  // 关联笔记到知识树
  associateNotes: (data: {
    treeId: number;
    noteIds: number[];
    associationMode?: 'auto' | 'manual';
    overrideExisting?: boolean;
  }) => {
    return post<KnowledgeTreeApiResponse<any>>('/api/knowledge-tree/associate-notes', data);
  },

  // 获取知识树子树详情
  getTreeDetailByTreeIdAndNodeId: (data: {
    treeId: number;
    nodeId: string;
  }) => {
    return get<KnowledgeTreeApiResponse<any>>(`/api/knowledge-tree/${data.treeId}/subtree/${data.nodeId}`);
  },
};

// 学习记录相关API
export const learningApi = {
  // 获取学习记录
  getLearningRecords: (userId: string, page: number = 1, size: number = 10) => {
    return get<ApiResponse<any>>(`/learning/records?userId=${userId}&page=${page}&size=${size}`);
  },
  
  // 添加学习记录
  addLearningRecord: (data: any) => {
    return post<ApiResponse<any>>('/learning/records', data);
  },
  
  // 获取学习统计
  getLearningStats: (userId: string) => {
    return get<ApiResponse<any>>(`/learning/stats/${userId}`);
  },
};

// 社区相关API
export const communityApi = {
  // 获取帖子列表
  getPosts: (page: number = 1, size: number = 10) => {
    return get<ApiResponse<any>>(`/community/posts?page=${page}&size=${size}`);
  },
  
  // 发布帖子
  createPost: (data: any) => {
    return post<ApiResponse<any>>('/community/posts', data);
  },
  
  // 获取帖子详情
  getPostDetail: (postId: string) => {
    return get<ApiResponse<any>>(`/community/posts/${postId}`);
  },
  
  // 点赞帖子
  likePost: (postId: string) => {
    return post<ApiResponse<any>>(`/community/posts/${postId}/like`);
  },
  
  // 评论帖子
  commentPost: (postId: string, content: string) => {
    return post<ApiResponse<any>>(`/community/posts/${postId}/comments`, { content });
  },
};

// 文件上传API
export const uploadApi = {
  // 上传头像
  uploadAvatar: (file: File) => {
    const formData = new FormData();
    formData.append('file', file);
    return upload<ApiResponse<{ url: string }>>('/upload/avatar', formData);
  },
  
  // 上传文件
  uploadFile: (file: File, type: string = 'general') => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('type', type);
    return upload<ApiResponse<{ url: string; filename: string }>>('/upload/file', formData);
  },
};

// 导出token工具函数
export { tokenUtils };

// 导出默认的request实例，供特殊情况使用
export { request };
