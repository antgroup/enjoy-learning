# 笔记关联知识树设计文档

需求补充：
1. 补充一下 知识树关联笔记接口和获取更新后的知识树接口出参的字段描述，以表格形式
2. 当前associateNotesToTree的实现逻辑没有按本设计文档去将知识树和笔记给大模型得到新的知识节点的关联情况，请进行修改
3. 我希望调整一下prompt，希望模型只告诉我应该关联到哪个父节点或者根节点就可以了，其它信息可以放到下一期再做，请在文档最后补充调整后的prompt设计


## 1. 概述

本文档设计学习笔记关联知识树功能，核心是将用户上传的笔记中提炼的知识点智能关联到知识树的合适节点位置，实现知识的有机整合和可视化展示。

## 2. 核心设计目标

### 2.1 功能目标
- 智能匹配笔记知识点到知识树节点
- 动态扩展知识树结构，自动创建新节点
- 保持知识树的层次结构和逻辑关系
- 支持多笔记关联到同一知识点

### 2.2 技术目标
- 使用MongoDB存储知识树，替代Neo4j
- 通过大模型API实现智能匹配
- 保证数据一致性和性能
- 支持知识树的实时更新

## 3. 知识树模型设计

### 3.1 MongoDB存储结构

#### 知识树主表（knowledge_trees）
```javascript
// MongoDB Collection: knowledge_trees
{
  "_id": ObjectId("..."),
  "treeId": 1001,
  "userId": 1001,
  "name": "我的知识体系",
  "description": "个人知识结构图谱",
  "category": "综合",
  "rootNodeId": "root_001",
  "totalNodes": 125,
  "maxDepth": 6,
  "associatedNotesCount": 15,
  "lastUpdateTime": ISODate("2024-01-21T16:30:00Z"),
  "createdAt": ISODate("2024-01-01T10:00:00Z"),
  "updatedAt": ISODate("2024-01-21T16:30:00Z")
}

// 索引
db.knowledge_trees.createIndex({"userId": 1})
db.knowledge_trees.createIndex({"treeId": 1}, {"unique": true})
```

#### 知识节点表（knowledge_nodes）
```javascript
// MongoDB Collection: knowledge_nodes
{
  "_id": ObjectId("..."),
  "nodeId": "js_001",
  "treeId": 1001,
  "userId": 1001,
  "name": "JavaScript",
  "category": "前端开发",
  "description": "JavaScript编程语言相关知识",
  "parentNodeId": "frontend_001", // null表示根节点
  "childrenNodeIds": ["js_basic_001", "js_advanced_001"],
  "level": 2, // 节点层级，根节点为0
  "path": ["root_001", "frontend_001", "js_001"], // 从根到当前节点的路径
  "position": {
    "x": 100,
    "y": 200,
    "order": 1 // 在同级节点中的排序
  },
  "progress": 75, // 学习进度 0-100
  "keywords": ["JavaScript", "编程", "前端", "脚本语言"],
  "relatedNodeIds": ["html_001", "css_001"], // 相关知识点
  "associatedNotes": [
    {
      "noteId": 2001,
      "title": "JavaScript学习笔记",
      "associatedKnowledgePoints": ["kp_001", "kp_002"],
      "associationTime": ISODate("2024-01-21T16:30:00Z"),
      "relevanceScore": 0.95 // 关联度评分
    }
  ],
  "metadata": {
    "difficulty": "intermediate",
    "importance": "core",
    "estimatedLearningTime": 40, // 小时
    "prerequisites": ["html_001", "css_001"]
  },
  "isAutoGenerated": true, // 是否由AI自动生成
  "sourceNoteIds": [2001, 2002], // 来源笔记ID列表
  "createdAt": ISODate("2024-01-21T16:30:00Z"),
  "updatedAt": ISODate("2024-01-21T16:30:00Z")
}

// 索引
db.knowledge_nodes.createIndex({"treeId": 1, "userId": 1})
db.knowledge_nodes.createIndex({"nodeId": 1}, {"unique": true})
db.knowledge_nodes.createIndex({"parentNodeId": 1})
db.knowledge_nodes.createIndex({"keywords": 1})
db.knowledge_nodes.createIndex({"associatedNotes.noteId": 1})
```

#### 知识点关联表（note_knowledge_associations）
```javascript
// MongoDB Collection: note_knowledge_associations
{
  "_id": ObjectId("..."),
  "associationId": "assoc_001",
  "userId": 1001,
  "noteId": 2001,
  "treeId": 1001,
  "nodeId": "js_001",
  "knowledgePointId": "kp_001", // 来自笔记分析的知识点ID
  "knowledgePointName": "JavaScript语言特性",
  "matchType": "exact", // exact-精确匹配, semantic-语义匹配, new-新创建
  "relevanceScore": 0.95, // 关联度评分 0-1
  "matchingKeywords": ["JavaScript", "语言特性", "动态类型"],
  "associationReason": "笔记中的'JavaScript语言特性'与节点'JavaScript'高度匹配",
  "isManualConfirmed": false, // 是否经过用户手动确认
  "createdAt": ISODate("2024-01-21T16:30:00Z"),
  "updatedAt": ISODate("2024-01-21T16:30:00Z")
}

// 索引
db.note_knowledge_associations.createIndex({"userId": 1, "noteId": 1})
db.note_knowledge_associations.createIndex({"treeId": 1, "nodeId": 1})
db.note_knowledge_associations.createIndex({"knowledgePointId": 1})
```

### 3.2 知识树层次结构设计

```
根节点 (level 0)
├── 技术领域 (level 1)
│   ├── 前端开发 (level 2)
│   │   ├── JavaScript (level 3)
│   │   │   ├── 基础语法 (level 4)
│   │   │   │   ├── 变量声明 (level 5)
│   │   │   │   └── 函数定义 (level 5)
│   │   │   └── 高级特性 (level 4)
│   │   │       ├── 闭包 (level 5)
│   │   │       └── 原型链 (level 5)
│   │   ├── React (level 3)
│   │   └── Vue (level 3)
│   └── 后端开发 (level 2)
└── 理论基础 (level 1)
```

## 4. 智能匹配算法设计

### 4.1 匹配策略

#### 4.1.1 三级匹配机制
1. **精确匹配**：知识点名称与节点名称完全一致
2. **语义匹配**：通过大模型分析语义相似度
3. **新节点创建**：无匹配节点时创建新节点

#### 4.1.2 匹配优先级
1. 优先匹配现有节点（relevanceScore > 0.8）
2. 考虑节点层级和上下文关系
3. 最后考虑创建新节点

### 4.2 大模型匹配Prompt设计

```
你是一个专业的知识结构分析专家，擅长将学习笔记中的知识点关联到知识树的合适位置。

**任务**：分析笔记知识点，找到知识树中的最佳关联位置

**输入信息**：

**笔记知识点**：
{knowledge_points}

**现有知识树结构**：
{tree_structure}

**分析要求**：

1. **匹配分析**：
   - 为每个知识点找到最佳的关联节点
   - 计算关联度评分（0-1，1表示完全匹配）
   - 分析匹配原因和依据

2. **层级分析**：
   - 确定知识点应该放置的层级
   - 分析与父节点和子节点的关系
   - 考虑知识的逻辑依赖关系

3. **新节点建议**：
   - 如果没有合适的现有节点（关联度<0.6），建议创建新节点
   - 确定新节点的父节点位置
   - 设计新节点的基本属性

4. **关系分析**：
   - 分析知识点之间的关联关系
   - 识别前置知识和后续知识
   - 建议相关知识点的连接

**匹配规则**：

1. **精确匹配**（关联度0.9-1.0）：
   - 知识点名称与节点名称完全一致或高度相似
   - 概念内容完全对应

2. **语义匹配**（关联度0.6-0.9）：
   - 知识点与节点在语义上相关
   - 属于同一知识领域或概念范畴
   - 可以作为节点的子概念或补充

3. **创建新节点**（关联度<0.6）：
   - 现有节点都无法很好匹配
   - 知识点具有独立性，值得单独成为节点

4. **层级确定原则**：
   - 基础概念放在较高层级（接近根节点）
   - 具体技能和应用放在较低层级
   - 保持知识的逻辑层次关系

**请按以下JSON格式返回分析结果**：
```json
{
  "matchingResults": [
    {
      "knowledgePointId": "kp_001",
      "knowledgePointName": "JavaScript语言特性",
      "matchType": "semantic",
      "targetNodeId": "js_001",
      "targetNodeName": "JavaScript",
      "relevanceScore": 0.95,
      "matchingReason": "JavaScript语言特性是JavaScript节点的核心内容",
      "suggestedAction": "associate",
      "suggestedLevel": 4,
      "suggestedParentNodeId": "js_001"
    }
  ],
  "newNodeSuggestions": [
    {
      "knowledgePointId": "kp_005",
      "knowledgePointName": "ES6模块系统",
      "suggestedNodeName": "ES6模块",
      "suggestedParentNodeId": "js_advanced_001",
      "suggestedLevel": 5,
      "category": "JavaScript高级特性",
      "description": "ES6引入的模块化系统，包括import/export语法",
      "keywords": ["ES6", "模块", "import", "export"],
      "creationReason": "ES6模块系统是独立的重要概念，值得单独成为节点"
    }
  ],
  "relationshipSuggestions": [
    {
      "sourceNodeId": "js_basic_001",
      "targetNodeId": "js_advanced_001",
      "relationType": "prerequisite",
      "reason": "基础语法是学习高级特性的前提"
    }
  ],
  "treeUpdateSummary": {
    "totalAssociations": 4,
    "newNodesCount": 2,
    "updatedNodesCount": 3,
    "confidenceScore": 0.88
  }
}
```

**注意事项**：
1. 优先考虑现有节点的匹配，避免过度创建新节点
2. 保持知识树的层次结构合理性
3. 确保关联度评分的准确性
4. 考虑知识点的实际重要性和独立性
5. 维护知识树的整体一致性
```

### 4.3 匹配算法实现流程

```
1. 获取笔记分析结果中的知识点列表
2. 获取用户当前知识树结构
3. 构建匹配分析Prompt
4. 调用大模型API进行匹配分析
5. 解析匹配结果，验证数据格式
6. 执行关联操作：
   - 关联到现有节点
   - 创建新节点
   - 更新节点关系
7. 更新知识树统计信息
8. 返回更新后的知识树数据
```

## 5. 接口设计

### 5.1 知识树关联笔记接口

#### 接口信息
- **接口路径**: `/api/knowledge-tree/associate-notes`
- **请求方法**: POST
- **接口描述**: 将笔记中的知识点关联到知识树

#### 请求参数
```json
{
  "userId": '1001',
  "treeId": '1001',
  "noteIds": ['2001', '2002'],
  "associationMode": "auto", // auto-自动关联, manual-手动确认
  "overrideExisting": false // 是否覆盖已有关联
}
```

#### 响应参数

| 参数名 | 类型 | 描述 |
|--------|------|------|
| code | Integer | 响应码，200表示成功 |
| message | String | 响应消息 |
| data | Object | 响应数据 |
| data.treeId | Long | 知识树ID |
| data.processedNotes | Array | 处理的笔记列表 |
| data.processedNotes[].noteId | Long | 笔记ID |
| data.processedNotes[].title | String | 笔记标题 |
| data.processedNotes[].status | String | 处理状态（success/failed/partial） |
| data.processedNotes[].associatedKnowledgePoints | Integer | 成功关联的知识点数量 |
| data.processedNotes[].newNodesCreated | Integer | 为该笔记创建的新节点数量 |
| data.processedNotes[].existingNodesUpdated | Integer | 更新的现有节点数量 |
| data.associationResults | Array | 关联结果详情 |
| data.associationResults[].knowledgePointId | String | 知识点ID |
| data.associationResults[].knowledgePointName | String | 知识点名称 |
| data.associationResults[].action | String | 执行的操作（associated/created_new_node/failed） |
| data.associationResults[].targetNodeId | String | 目标节点ID（关联到现有节点时） |
| data.associationResults[].targetNodeName | String | 目标节点名称（关联到现有节点时） |
| data.associationResults[].newNodeId | String | 新创建的节点ID（创建新节点时） |
| data.associationResults[].parentNodeId | String | 父节点ID（创建新节点时） |
| data.associationResults[].relevanceScore | Double | 关联度评分（0-1） |
| data.treeUpdateSummary | Object | 知识树更新摘要 |
| data.treeUpdateSummary.totalNodes | Integer | 更新后的总节点数 |
| data.treeUpdateSummary.newNodesCount | Integer | 新创建的节点数量 |
| data.treeUpdateSummary.updatedNodesCount | Integer | 更新的现有节点数量 |
| data.treeUpdateSummary.totalAssociations | Integer | 总关联数量 |
| data.processTime | String | 处理完成时间 |

```json
{
  "code": 200,
  "message": "笔记关联成功，知识树已更新",
  "data": {
    "treeId": 1001,
    "processedNotes": [
      {
        "noteId": 2001,
        "title": "JavaScript学习笔记",
        "status": "success",
        "associatedKnowledgePoints": 4,
        "newNodesCreated": 2,
        "existingNodesUpdated": 2
      }
    ],
    "associationResults": [
      {
        "knowledgePointId": "kp_001",
        "knowledgePointName": "JavaScript语言特性",
        "action": "associated",
        "targetNodeId": "js_001",
        "targetNodeName": "JavaScript",
        "relevanceScore": 0.95
      },
      {
        "knowledgePointId": "kp_005",
        "knowledgePointName": "ES6模块系统",
        "action": "created_new_node",
        "newNodeId": "js_es6_modules_001",
        "parentNodeId": "js_advanced_001"
      }
    ],
    "treeUpdateSummary": {
      "totalNodes": 127,
      "newNodesCount": 2,
      "updatedNodesCount": 3,
      "totalAssociations": 6
    },
    "processTime": "2024-01-21 16:30:00"
  }
}
```

### 5.2 获取更新后的知识树接口

#### 接口信息
- **接口路径**: `/api/knowledge-tree/data/updated`
- **请求方法**: GET
- **接口描述**: 获取关联笔记后的完整知识树数据

#### 请求参数
| 参数名 | 类型 | 必填 | 描述 |
|--------|------|------|------|
| userId | Long | 是 | 用户ID |
| treeId | Long | 是 | 知识树ID |
| includeNoteInfo | Boolean | 否 | 是否包含关联笔记信息 |
| maxDepth | Integer | 否 | 最大展示层级，默认全部 |

#### 响应参数

| 参数名 | 类型 | 描述 |
|--------|------|------|
| code | Integer | 响应码，200表示成功 |
| message | String | 响应消息 |
| data | Object | 响应数据 |
| data.treeId | Long | 知识树ID |
| data.name | String | 知识树名称 |
| data.lastUpdateTime | String | 最后更新时间 |
| data.totalNodes | Integer | 总节点数 |
| data.associatedNotesCount | Integer | 关联笔记总数 |
| data.tree | Object | 知识树结构数据 |
| data.tree.nodeId | String | 根节点ID |
| data.tree.name | String | 根节点名称 |
| data.tree.level | Integer | 节点层级（根节点为0） |
| data.tree.children | Array | 子节点列表 |
| data.tree.children[].nodeId | String | 子节点ID |
| data.tree.children[].name | String | 子节点名称 |
| data.tree.children[].level | Integer | 子节点层级 |
| data.tree.children[].progress | Integer | 学习进度（0-100） |
| data.tree.children[].description | String | 节点描述 |
| data.tree.children[].keywords | Array | 关键词列表 |
| data.tree.children[].associatedNotesCount | Integer | 关联笔记数量 |
| data.tree.children[].isAutoGenerated | Boolean | 是否由AI自动生成 |
| data.tree.children[].sourceNoteIds | Array | 来源笔记ID列表 |
| data.tree.children[].associatedNotes | Array | 关联笔记列表（当includeNoteInfo=true时） |
| data.tree.children[].associatedNotes[].noteId | Long | 笔记ID |
| data.tree.children[].associatedNotes[].title | String | 笔记标题 |
| data.tree.children[].associatedNotes[].relevanceScore | Double | 关联度评分（0-1） |
| data.tree.children[].associatedNotes[].associatedKnowledgePoints | Array | 关联的知识点ID列表 |
| data.tree.children[].children | Array | 子节点的子节点（递归结构） |

```json
{
  "code": 200,
  "message": "success",
  "data": {
    "treeId": 1001,
    "name": "我的知识体系",
    "lastUpdateTime": "2024-01-21 16:30:00",
    "totalNodes": 127,
    "associatedNotesCount": 15,
    "tree": {
      "nodeId": "root_001",
      "name": "我的知识体系",
      "level": 0,
      "children": [
        {
          "nodeId": "frontend_001",
          "name": "前端开发",
          "level": 1,
          "progress": 85,
          "associatedNotesCount": 8,
          "children": [
            {
              "nodeId": "js_001",
              "name": "JavaScript",
              "level": 2,
              "progress": 80,
              "description": "JavaScript编程语言",
              "keywords": ["JavaScript", "编程", "前端"],
              "associatedNotes": [
                {
                  "noteId": 2001,
                  "title": "JavaScript学习笔记",
                  "relevanceScore": 0.95,
                  "associatedKnowledgePoints": ["kp_001", "kp_002"]
                }
              ],
              "children": [
                {
                  "nodeId": "js_es6_modules_001",
                  "name": "ES6模块",
                  "level": 3,
                  "progress": 0,
                  "isAutoGenerated": true,
                  "sourceNoteIds": [2001],
                  "description": "ES6引入的模块化系统",
                  "associatedNotes": [
                    {
                      "noteId": 2001,
                      "title": "JavaScript学习笔记",
                      "relevanceScore": 0.88,
                      "associatedKnowledgePoints": ["kp_005"]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  }
}
```

### 5.3 知识树节点详情接口

#### 接口信息
- **接口路径**: `/api/knowledge-tree/node/{nodeId}/details`
- **请求方法**: GET
- **接口描述**: 获取知识树节点的详细信息，包括关联笔记

#### 响应参数
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "nodeId": "js_001",
    "name": "JavaScript",
    "category": "前端开发",
    "description": "JavaScript编程语言相关知识",
    "level": 2,
    "progress": 80,
    "keywords": ["JavaScript", "编程", "前端", "脚本语言"],
    "metadata": {
      "difficulty": "intermediate",
      "importance": "core",
      "estimatedLearningTime": 40
    },
    "associatedNotes": [
      {
        "noteId": 2001,
        "title": "JavaScript学习笔记",
        "relevanceScore": 0.95,
        "associationTime": "2024-01-21 16:30:00",
        "associatedKnowledgePoints": [
          {
            "id": "kp_001",
            "name": "JavaScript语言特性",
            "description": "JavaScript是一种弱类型、解释型的动态编程语言"
          }
        ]
      }
    ],
    "relatedNodes": [
      {
        "nodeId": "html_001",
        "name": "HTML",
        "relationType": "prerequisite"
      }
    ],
    "children": [
      {
        "nodeId": "js_basic_001",
        "name": "JavaScript基础",
        "progress": 90
      }
    ],
    "parent": {
      "nodeId": "frontend_001",
      "name": "前端开发"
    }
  }
}
```



## 7. 业务流程设计

### 7.1 笔记关联知识树完整流程

```
1. 用户选择已分析的笔记进行关联
2. 系统获取笔记的知识点分析结果
3. 获取用户当前知识树结构
4. 构建匹配分析Prompt，调用大模型API
5. 解析匹配结果，执行以下操作：
   a. 关联知识点到现有节点
   b. 创建新节点（如需要）
   c. 更新节点关

为了简化知识点关联过程，我们调整了大模型提示词设计，使其更加专注于核心功能：确定笔记知识点应该关联到知识树中的哪个节点。

### 5.1 简化的提示词结构

```
你是一个专业的知识结构分析专家，擅长将学习笔记中的知识点关联到知识树的合适位置。

**任务**：分析笔记知识点，找到知识树中的最佳关联位置

**输入信息**：

**笔记知识点和知识树结构**：
{requestData}

**分析要求**：

1. **简化分析**：
   - 只需要确定每个知识点应该关联到知识树中的哪个节点
   - 如果知识点与现有节点匹配度低于0.6，建议创建新节点并指定其父节点

2. **返回格式**：
   - 对每个知识点，返回一个简单的关联建议
   - 只需要指定目标节点ID或新节点的父节点ID
   - 不需要详细的匹配原因、关系分析等复杂信息

**请按以下JSON格式返回分析结果**：
```json
{
  "matchingResults": [
    {
      "knowledgePointId": "kp_id",
      "targetNodeId": "existing_node_id",
      "relevanceScore": 0.8
    }
  ],
  "newNodeSuggestions": [
    {
      "knowledgePointId": "kp_id",
      "suggestedParentNodeId": "parent_node_id",
      "suggestedNodeName": "知识点名称"
    }
  ]
}
```
```

### 5.2 简化设计的优势

1. **聚焦核心功能**：只关注知识点与节点的关联关系，不涉及复杂的关系分析
2. **减少返回数据量**：简化的JSON结构减少了不必要的字段，提高处理效率
3. **提高准确性**：通过简化任务，使大模型能够更专注于核心匹配问题
4. **降低计算成本**：简化的提示词和返回格式可以减少token消耗

### 5.3 后续计划

在下一期开发中，我们将考虑增加以下功能：
1. 知识点之间的关系分析
2. 知识树结构优化建议
3. 学习路径推荐
4. 更详细的匹配原因分析
