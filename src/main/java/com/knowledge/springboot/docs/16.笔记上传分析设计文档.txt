# 笔记上传分析设计文档

需求补充：
1. 补充uploadNote对应的接口文档
2. 检查一下各个接口，入参中就不要带userId了，直接服务端解析或者从缓存中获取即可，更新文档并修改相关接口逻辑

## uploadNote接口文档

### 1. 接口概述

- **接口URL**：`/api/notes`
- **请求方式**：POST
- **接口说明**：上传学习笔记，支持直接输入文本内容，系统会自动进行AI分析

### 2. 请求参数

#### 请求头

| 参数名 | 必选 | 类型 | 说明 |
| ------ | ---- | ---- | ---- |
| Content-Type | 是 | String | 请求体类型，值为application/json |
| Authorization | 是 | String | Bearer开头的令牌，如"Bearer eyJhbGci..." |

#### 请求体

| 参数名 | 必选 | 类型 | 说明 |
| ------ | ---- | ---- | ---- |
| title | 否 | String | 笔记标题，最大200个字符。不提供时系统会根据内容自动生成 |
| content | 是 | String | 笔记内容，不能为空，最大50000个字符 |
| tags | 否 | Array | 标签列表，字符串数组 |
| relatedKnowledgePoints | 否 | Array | 关联知识点ID列表，字符串数组 |
| learningMethod | 否 | String | 学习方式，可选值：reading、practice、hands-on、creation，默认为reading |

#### 请求示例

```json
{
  "title": "JavaScript基础学习笔记",
  "content": "JavaScript是一种动态类型的编程语言，主要用于网页开发...",
  "tags": ["前端", "JavaScript", "编程语言"],
  "relatedKnowledgePoints": ["60f1a5c3e4b0a1b2c3d4e5f6"],
  "learningMethod": "reading"
}
```

### 3. 响应参数

#### 响应体

| 参数名 | 类型 | 说明 |
| ------ | ---- | ---- |
| code | String | 状态码，00000表示成功 |
| userHint | String | 用户提示信息，SUCCESS表示成功 |
| errorMessage | String | 错误信息，仅在出错时返回 |
| data | Object | 响应数据 |

##### data参数说明

| 参数名 | 类型 | 说明 |
| ------ | ---- | ---- |
| noteId | String | 笔记ID |
| title | String | 笔记标题 |
| analysisStatus | String | 分析状态，固定为"pending" |
| estimatedTime | Integer | 预计完成分析的时间（秒） |

#### 响应示例（成功）

```json
{
  "code": "00000",
  "userHint": "SUCCESS",
  "data": {
    "noteId": "683156239cf79814622fdf7a",
    "title": "JavaScript基础学习笔记",
    "analysisStatus": "pending",
    "estimatedTime": 15
  }
}
```

#### 响应示例（失败）

```json
{
  "code": "B0001",
  "userHint": "SYSTEM ERROR",
  "errorMessage": "笔记上传失败：内容不能为空",
  "data": null
}
```

### 4. cURL命令示例

```bash
curl -X POST http://localhost:8080/api/notes \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9...' \
  -d '{
    "title": "JavaScript基础学习笔记",
    "content": "JavaScript是一种动态类型的编程语言，主要用于网页开发...",
    "tags": ["前端", "JavaScript", "编程语言"],
    "learningMethod": "reading"
  }'
```

### 5. 业务规则

1. 用户必须登录才能上传笔记
2. 笔记内容不能为空，且不能超过50000个字符
3. 标题可选，如不提供，系统会在AI分析后自动生成
4. 上传成功后，系统会异步进行AI分析，用户可以通过`/api/notes/{noteId}/analysis`接口查询分析状态
5. 分析完成后，系统会自动计算智慧值并保存

## 1. 概述

本文档设计学习笔记上传和AI分析功能，支持用户上传txt文本文件或直接输入纯文本，通过大模型API分析笔记内容，提炼知识点和纲要信息。

## 2. 功能需求

### 2.1 核心功能
- 支持txt文件上传和纯文本输入
- 异步调用大模型接口分析笔记内容
- 提炼笔记纲要和知识点，以JSON格式返回
- 存储分析结果，支持查询分析状态

### 2.2 技术要求
- 文件上传限制：仅支持txt格式，最大5MB
- 异步处理：避免阻塞用户操作
- 错误处理：提供降级方案
- 数据存储：MongoDB存储笔记和分析结果

## 3. 接口设计

### 3.1 笔记上传接口

#### 接口信息
- **接口路径**: `/api/notes`
- **请求方法**: POST
- **接口描述**: 上传学习笔记，支持文本输入

#### 请求参数
```json
{
  "title": "JavaScript学习笔记",
  "content": "JavaScript是一种动态类型的编程语言...",
  "tags": ["前端", "JavaScript", "编程语言"],
  "learningMethod": "reading"
}
```

| 参数名 | 类型 | 必填 | 描述 |
|--------|------|------|------|
| title | String | 否 | 笔记标题 |
| content | String | 是 | 纯文本内容 |
| tags | Array | 否 | 标签列表 |
| learningMethod | String | 否 | 学习方式 |

#### 响应参数
```json
{
  "code": "00000",
  "userHint": "SUCCESS",
  "data": {
    "noteId": "683156239cf79814622fdf7a",
    "title": "JavaScript学习笔记",
    "analysisStatus": "pending",
    "estimatedTime": 15
  }
}
```

### 3.2 获取分析结果接口

#### 接口信息
- **接口路径**: `/api/notes/{noteId}/analysis`
- **请求方法**: GET
- **接口描述**: 获取笔记AI分析结果

#### 请求参数
| 参数名 | 类型 | 必填 | 描述 |
|--------|------|------|------|
| noteId | String | 是 | 笔记ID（路径参数） |

#### 响应参数
```json
{
  "code": "00000",
  "userHint": "SUCCESS",
  "data": {
    "analysisStatus": "completed",
    "aiAnalysis": {
      "summary": "本笔记介绍了JavaScript的基本特点、语法和高级特性",
      "extractedKeywords": ["JavaScript", "编程语言", "动态类型"],
      "knowledgePoints": [
        {
          "concept": "JavaScript语言特性",
          "importance": 0.9,
          "category": "基础概念"
        }
      ],
      "subjectArea": "前端开发"
    },
    "wisdomValue": {
      "baseWisdomValue": 100.0,
      "difficultyLevel": "intermediate",
      "importanceLevel": "core",
      "evaluationSummary": "这是一篇关于JavaScript的核心知识笔记，难度适中但重要性很高"
    }
  }
}
```

### 3.3 笔记列表接口

#### 接口信息
- **接口路径**: `/api/notes`
- **请求方法**: GET
- **接口描述**: 获取用户笔记列表

#### 请求参数
无需额外参数，用户ID从认证信息中获取

#### 响应参数
```json
{
  "code": "00000",
  "userHint": "SUCCESS",
  "data": [
    {
      "id": "683156239cf79814622fdf7a",
      "title": "JavaScript学习笔记",
      "content": "JavaScript是一种动态类型的编程语言...",
      "tags": ["前端", "JavaScript"],
      "status": "active",
      "createdAt": "2025-05-24 13:16:19"
    }
  ]
}
```

## 4. 大模型API调用设计

### 4.1 分析Prompt模板

```
你是一个专业的学习内容分析专家，擅长从学习笔记中提炼知识点和纲要。请分析以下学习笔记内容：

**任务**：分析学习笔记，提炼纲要和知识点

**笔记信息**：
- 标题：{note_title}
- 学科领域：{subject_area}
- 标签：{tags}
- 内容：{note_content}

**分析要求**：

1. **纲要提炼**：
   - 确定笔记的主题标题
   - 生成内容摘要（100-200字）
   - 提取3-5个主要观点

2. **知识点提炼**：
   - 识别笔记中的核心知识点（3-10个）
   - 为每个知识点分类（如：基础概念、实践技能、理论知识等）
   - 提供简洁的描述（50-100字）
   - 提取关键词（3-5个）
   - 评估难度级别（beginner/intermediate/advanced/expert）
   - 评估重要性（auxiliary/general/important/core）

3. **知识点分类标准**：
   - 基础概念：基本定义、术语、原理
   - 实践技能：操作方法、应用技巧、实现步骤
   - 理论知识：深层原理、抽象概念、理论框架
   - 高级特性：进阶内容、复杂应用、专业技术

4. **难度评估标准**：
   - beginner：基础概念，易于理解
   - intermediate：需要一定基础，中等复杂度
   - advanced：需要深入理解，较高复杂度
   - expert：专业级别，需要丰富经验

5. **重要性评估标准**：
   - core：核心知识，必须掌握
   - important：重要知识，建议掌握
   - general：一般知识，有助理解
   - auxiliary：辅助知识，了解即可

**请按以下JSON格式返回分析结果**：
```json
{
  "outline": {
    "title": "笔记主题标题",
    "summary": "内容摘要",
    "mainPoints": [
      "主要观点1",
      "主要观点2",
      "主要观点3"
    ]
  },
  "knowledgePoints": [
    {
      "name": "知识点名称",
      "category": "知识点分类",
      "description": "知识点描述",
      "keywords": ["关键词1", "关键词2", "关键词3"],
      "difficulty": "难度级别",
      "importance": "重要性级别"
    }
  ],
  "metadata": {
    "totalKnowledgePoints": 5,
    "primarySubject": "主要学科",
    "analysisConfidence": 0.95
  }
}
```

**注意事项**：
1. 确保知识点提炼准确，避免重复
2. 分类要合理，描述要简洁明了
3. 关键词要具有代表性
4. 难度和重要性评估要客观
5. 如果内容不足以提炼知识点，请说明原因
```

### 4.2 API调用参数

#### 输入参数
```json
{
  "note_title": "JavaScript学习笔记",
  "subject_area": "前端开发",
  "tags": ["前端", "JavaScript", "编程语言"],
  "note_content": "JavaScript是一种动态类型的编程语言。\n\n主要特点：\n1. 弱类型语言\n2. 解释型语言\n3. 支持面向对象编程\n\n基础语法：\n- 变量声明：let, const, var\n- 函数定义：function关键字\n- 对象创建：字面量语法\n\n高级特性：\n- 闭包\n- 原型链\n- 异步编程"
}
```

#### 输出结果示例
```json
{
  "outline": {
    "title": "JavaScript编程语言基础",
    "summary": "本笔记系统介绍了JavaScript的基本特点、核心语法和高级特性，涵盖了从基础概念到实际应用的完整知识体系，适合初学者建立JavaScript编程的基础认知。",
    "mainPoints": [
      "JavaScript是动态类型的解释型语言",
      "掌握基础语法是编程的基础",
      "闭包和原型链是JavaScript的核心特性",
      "异步编程是现代JavaScript开发的重要技能"
    ]
  },
  "knowledgePoints": [
    {
      "name": "JavaScript语言特性",
      "category": "基础概念",
      "description": "JavaScript是一种弱类型、解释型的动态编程语言，支持面向对象编程范式。",
      "keywords": ["弱类型", "解释型", "动态", "面向对象"],
      "difficulty": "beginner",
      "importance": "core"
    },
    {
      "name": "变量声明",
      "category": "实践技能",
      "description": "JavaScript中使用let、const、var关键字声明变量，具有不同的作用域规则和特性。",
      "keywords": ["let", "const", "var", "作用域"],
      "difficulty": "beginner",
      "importance": "core"
    },
    {
      "name": "函数定义",
      "category": "实践技能",
      "description": "使用function关键字定义函数，是JavaScript编程的基础语法结构。",
      "keywords": ["function", "函数", "语法"],
      "difficulty": "beginner",
      "importance": "core"
    },
    {
      "name": "闭包",
      "category": "高级特性",
      "description": "闭包是JavaScript中的重要概念，允许内部函数访问外部函数的变量，是理解作用域链的关键。",
      "keywords": ["闭包", "作用域链", "内存管理"],
      "difficulty": "intermediate",
      "importance": "important"
    },
    {
      "name": "原型链",
      "category": "高级特性",
      "description": "JavaScript通过原型链实现继承机制，是理解对象继承和方法查找的核心概念。",
      "keywords": ["原型", "继承", "prototype"],
      "difficulty": "intermediate",
      "importance": "important"
    },
    {
      "name": "异步编程",
      "category": "高级特性",
      "description": "异步编程是现代JavaScript开发的重要技能，包括Promise、async/await等机制。",
      "keywords": ["异步", "Promise", "async"],
      "difficulty": "advanced",
      "importance": "important"
    }
  ],
  "metadata": {
    "totalKnowledgePoints": 6,
    "primarySubject": "前端开发",
    "analysisConfidence": 0.92
  }
}
```

## 5. 数据库设计

### 5.1 学习笔记集合（learning_notes）

```javascript
// MongoDB Collection: learning_notes
{
  "_id": ObjectId("..."),
  "userId": "test_user_id",
  "title": "JavaScript学习笔记",
  "content": "笔记原始内容...",
  "rawContent": "# JavaScript学习笔记\n\nJavaScript是一种动态类型的编程语言...", // Markdown格式的笔记内容，由AI模型生成
  "tags": ["前端", "JavaScript", "编程语言"],
  "relatedKnowledgePoints": ["60f1a5c3e4b0a1b2c3d4e5f6"], // 关联的知识点ID列表
  "learningMethod": "reading", // reading, practice, hands-on, creation
  "aiAnalysis": {
    "status": "completed", // pending, completed, failed
    "extractedKeywords": ["JavaScript", "编程语言", "动态类型"],
    "summary": "本笔记介绍了JavaScript的基本特点、语法和高级特性",
    "subjectArea": "前端开发", // AI判断的学科领域
    "knowledgePoints": [
      {
        "concept": "JavaScript语言特性",
        "importance": 0.9,
        "category": "基础概念"
      },
      {
        "concept": "变量声明",
        "importance": 0.8,
        "category": "实践技能"
      }
    ],
    "analyzedAt": ISODate("2024-01-21T10:35:00Z"),
    "errorMessage": null
  },
  "status": "active", // active, deleted
  "createdAt": ISODate("2024-01-21T10:30:00Z"),
  "updatedAt": ISODate("2024-01-21T10:35:00Z")
}

// 索引创建语句
db.learning_notes.createIndex({"userId": 1, "status": 1, "createdAt": -1})
db.learning_notes.createIndex({"tags": 1})
db.learning_notes.createIndex({"aiAnalysis.status": 1})
db.learning_notes.createIndex({"aiAnalysis.subjectArea": 1})
db.learning_notes.createIndex({"aiAnalysis.extractedKeywords": 1})
db.learning_notes.createIndex({"relatedKnowledgePoints": 1})
```

### 5.2 智慧值记录集合（wisdom_records）

```javascript
// MongoDB Collection: wisdom_records
{
  "_id": ObjectId("..."),
  "userId": "test_user_id",
  "noteId": "60f1a5c3e4b0a1b2c3d4e5f6",
  "knowledgePointId": "60f1a5c3e4b0a1b2c3d4e5f7", // 可选，关联的知识点ID
  "baseWisdomValue": 100.0, // 基础智慧值
  "currentWisdomValue": 100.0, // 当前智慧值（可能会随时间衰减）
  "difficultyLevel": "intermediate", // beginner, intermediate, advanced, expert
  "difficultyCoefficient": 1.2,
  "importanceLevel": "core", // auxiliary, general, important, core
  "importanceCoefficient": 1.5,
  "qualityLevel": "good", // excellent, good, pass, fail
  "qualityCoefficient": 1.0,
  "learningMethod": "reading", // reading, practice, hands-on, creation
  "learningMethodCoefficient": 0.8,
  "knowledgeType": "understanding", // theoretical, practical, memory, understanding
  "knowledgeTypeCoefficient": 1.2,
  "calculationBreakdown": {
    "difficultyContribution": "中等难度，需要一定理解能力",
    "importanceContribution": "核心知识，对理解整体很重要",
    "qualityContribution": "内容质量良好，有一定深度"
  },
  "evaluationSummary": "这是一篇关于JavaScript的核心知识笔记，难度适中但重要性很高",
  "createdAt": ISODate("2024-01-21T10:35:00Z"),
  "updatedAt": ISODate("2024-01-21T10:35:00Z")
}

// 索引创建语句
db.wisdom_records.createIndex({"userId": 1, "createdAt": -1})
db.wisdom_records.createIndex({"noteId": 1}, {"unique": true})
db.wisdom_records.createIndex({"knowledgePointId": 1})
db.wisdom_records.createIndex({"baseWisdomValue": -1})
db.wisdom_records.createIndex({"importanceLevel": 1})
db.wisdom_records.createIndex({"difficultyLevel": 1})
```

## 6. 业务流程设计

### 6.1 笔记上传流程

```
1. 用户上传笔记（文件或文本）
2. 服务端验证文件格式和大小
3. 保存笔记到数据库（status: processing）
4. 生成AI任务ID，异步调用大模型API
5. 返回笔记ID和任务状态给前端
6. 前端可轮询查询分析状态
```

### 6.2 AI分析流程

```
1. 从任务队列获取待处理任务
2. 构建分析Prompt
3. 调用大模型API
4. 解析API响应，验证数据格式
5. 保存分析结果到数据库
6. 更新笔记状态为completed
7. 记录任务执行日志
```

### 6.3 错误处理流程

```
1. API调用失败：重试3次，间隔递增
2. 解析失败：记录错误，标记任务失败
3. 超时处理：设置30秒超时，超时则重试
4. 降级方案：提供基础的文本分析结果
```

## 7. 性能优化

### 7.1 异步处理
- 使用消息队列处理AI分析任务
- 支持任务优先级和批量处理
- 实现任务重试和失败恢复机制

### 7.2 缓存策略
- 相似内容的分析结果缓存24小时
- 使用Redis缓存热点数据
- 实现分布式缓存一致性

### 7.3 成本控制
- 设置用户每日分析次数限制
- 实现API调用频率限制
- 监控API使用量和成本

## 8. 安全考虑

### 8.1 文件安全
- 限制文件类型为txt
- 限制文件大小最大5MB
- 文件内容安全扫描

### 8.2 数据安全
- 用户数据隔离
- 敏感信息加密存储
- API调用日志记录

### 8.3 接口安全
- 用户身份验证
- 请求频率限制
- 参数验证和过滤

## 9. 监控指标

### 9.1 业务指标
- 笔记上传成功率 > 99%
- AI分析成功率 > 95%
- 平均分析时间 < 3分钟
- 用户满意度 > 4.0/5.0

### 9.2 技术指标
- API响应时间 < 2秒
- 系统可用性 > 99.9%
- 错误率 < 1%
- 并发处理能力 > 100 QPS

## 10. 实施计划

### 10.1 第一阶段（1-2周）
- 实现基础的笔记上传功能
- 集成大模型API调用
- 建立数据库表结构
- 实现基础的错误处理

### 10.2 第二阶段（1周）
- 优化AI分析Prompt
- 实现异步任务处理
- 添加监控和日志
- 性能测试和优化

### 10.3 第三阶段（1周）
- 用户体验优化
- 安全加固
- 文档完善
- 上线部署

通过以上设计，我们可以实现一个完整的笔记上传和AI分析系统，为后续的知识树关联功能提供基础数据支持。
