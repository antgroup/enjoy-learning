# 快乐学习软件数据库安装指南

根据技术设计方案分析，项目采用多模型数据库策略，需要安装多种数据库以支持不同的功能模块。本文档提供主要数据库的安装和基本配置指南。

## 1. Docker 安装指南（Mac）

由于本文档中大部分数据库都推荐使用 Docker 方式安装，因此首先需要在 Mac 系统上安装 Docker。使用 Homebrew 进行命令行安装。

### 使用 Homebrew 安装 Docker

Homebrew 是 Mac 上流行的包管理器，可以通过命令行方式安装 Docker。

#### 安装步骤：

1. **安装 Homebrew（如果尚未安装）**
   ```bash
   # 安装 Homebrew
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   ```

2. **安装 Docker**
   ```bash
   # 更新 Homebrew
   brew update

   # 安装 Docker Desktop（包含完整的 Docker 环境）
   brew install --cask docker
   ```

3. **启动 Docker**
   ```bash
   # 启动 Docker Desktop
   open /Applications/Docker.app
   ```

4. **验证安装**
   ```bash
   # 验证安装
   docker --version
   docker-compose --version

   # 测试运行
   docker run hello-world
   ```

#### 优势：
- 命令行安装，适合开发者
- 与其他 Homebrew 包管理统一
- 安装过程简单快捷

#### 注意事项：
- 首次启动 Docker Desktop 可能需要管理员权限
- 需要 macOS 10.15 或更高版本
- 需要至少 4GB RAM

### Docker 基本配置

安装完成后，建议进行以下基本配置：

```bash
# 配置 Docker 镜像加速器（可选，提高下载速度）
# 在 Docker Desktop 的 Settings > Docker Engine 中添加：
{
  "registry-mirrors": [
    "https://docker.mirrors.ustc.edu.cn",
    "https://hub-mirror.c.163.com"
  ]
}
```

### 常用 Docker 命令

```bash
# 查看 Docker 信息
docker info

# 查看运行中的容器
docker ps

# 查看所有容器（包括停止的）
docker ps -a

# 查看本地镜像
docker images

# 停止容器
docker stop <container_name>

# 删除容器
docker rm <container_name>

# 删除镜像
docker rmi <image_name>

# 查看容器日志
docker logs <container_name>
```

---

## 2. 数据库选型分析

技术设计方案中提到了多种数据库，每种针对特定场景：

2. **MongoDB**: 文档型数据，适合树结构和配置数据
3. **Neo4j**: 图数据库，用于知识点关联关系和社交关系
4. **Redis**: 缓存、实时数据和排行榜

综合分析，项目**最低需要安装两种数据库**才能满足基本需求：
- **MongoDB**: 处理知识结构和文档数据

其他数据库可以根据项目阶段逐步引入，本文档将提供这五种数据库的安装指南。

## 3. MongoDB 安装与配置

### Docker 安装方式（推荐）

```bash
# 拉取MongoDB镜像
docker pull mongo:5.0

# 创建并运行MongoDB容器
docker run --name mongodb-happy-learning -p 27017:27017 -d mongo:5.0

# 创建数据库和用户
docker exec -it mongodb-happy-learning mongosh --eval "db = db.getSiblingDB('enjoy_learning'); db.createUser({user: 'happy_user', pwd: 'your_password', roles: [{role: 'readWrite', db: 'enjoy_learning'}]})"
```

### 本地安装方式

#### macOS
```bash
# 使用Homebrew安装
brew tap mongodb/brew  # 添加mongo仓库到本地
# brew search mongodb # 查看有哪些版本
brew install mongodb-community # 默认安装最新版本

# 启动MongoDB服务
brew services start mongodb-community
# brew services start mongodb-community@6.0

# 检查MongoDB服务状态
brew services list | grep mongo
# ps aux | grep mongod

# 创建数据库和用户
mongosh --eval "db = db.getSiblingDB('enjoy_learning'); db.createUser({user: 'root', pwd: '123456', roles: [{role: 'readWrite', db: 'enjoy_learning'}]})"
```

### 初始化集合
```javascript
// 连接到数据库
use enjoy_learning

// 创建知识树集合
db.createCollection("knowledge_trees")

// 创建等级规则集合
db.createCollection("level_rules")

```

## 4. Neo4j 安装与配置（可选）

### Docker 安装方式（推荐）

```bash
# 拉取Neo4j镜像
docker pull neo4j:4.4

# 创建并运行Neo4j容器
docker run --name neo4j-happy-learning -p 7474:7474 -p 7687:7687 -e NEO4J_AUTH=neo4j/your_password -d neo4j:4.4
```

### 本地安装方式

#### 所有平台
1. 下载Neo4j Desktop：https://neo4j.com/download/
2. 安装并启动Neo4j Desktop
3. 创建新数据库，设置密码
4. 启动数据库

### 初始化图数据
```cypher
// 创建知识点节点
CREATE CONSTRAINT ON (k:KnowledgePoint) ASSERT k.id IS UNIQUE;

// 创建用户节点
CREATE CONSTRAINT ON (u:User) ASSERT u.id IS UNIQUE;

// 创建知识领域节点
CREATE CONSTRAINT ON (d:Domain) ASSERT d.name IS UNIQUE;

// 示例知识点关系
CREATE (d:Domain {name: '数学'})
CREATE (k1:KnowledgePoint {id: 'k1', name: '代数基础'})
CREATE (k2:KnowledgePoint {id: 'k2', name: '线性方程'})
CREATE (k3:KnowledgePoint {id: 'k3', name: '二次方程'})
CREATE (d)-[:CONTAINS]->(k1)
CREATE (k1)-[:PREREQUISITE_FOR]->(k2)
CREATE (k2)-[:PREREQUISITE_FOR]->(k3);
```

## 5. Redis 安装与配置（可选）

### Docker 安装方式（推荐）

```bash
# 拉取Redis镜像
docker pull redis:6.2

# 创建并运行Redis容器
docker run --name redis-happy-learning -p 6379:6379 -d redis:6.2 redis-server --requirepass "123456"
```

### 本地安装方式
#### macOS
```bash
# 使用Homebrew安装
brew install redis

# 启动Redis服务
brew services start redis
```

### 基本配置
```bash
# 连接到Redis
redis-cli

# 设置密码
CONFIG SET requirepass "123456"

# 认证
AUTH your_password

# 测试连接
PING
```

## 6. 数据库连接配置

### 应用配置示例 (.env文件)

```

# MongoDB配置
MONGODB_URI=mongodb://happy_user:your_password@localhost:27017/enjoy_learning

# Neo4j配置
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=your_password

# Redis配置
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_password

```

## 7. 数据库维护建议

1. **备份策略**：
   - MongoDB: 使用mongodump每日备份
   - Neo4j: 定期导出图数据

2. **性能监控**：
   - 使用Prometheus + Grafana监控数据库性能
   - 为常用查询创建适当索引

3. **安全建议**：
   - 限制数据库访问IP
   - 使用强密码
   - 定期更新数据库版本
   - 对敏感数据进行加密存储

---

注意：在生产环境中部署时，请确保调整上述配置以满足安全性和性能需求。

# 补充分析

## MongoDB完全替代MySQL的可行性分析

考虑到项目的复杂性和多样化的数据需求，以下分析了使用MongoDB完全替代MySQL作为主要数据库的可行性。

### 可行性分析

#### 技术可行性
MongoDB作为文档型数据库，完全可以存储项目中的所有数据类型，包括：
- 用户信息
- 智慧值和成长值记录
- 知识点数据
- 学习记录
- 社区内容

从技术角度看，MongoDB的文档模型足够灵活，可以适应项目中的各种数据结构需求。

#### 优势
1. **简化架构**：使用单一数据库可大幅简化系统架构和维护成本
2. **灵活的数据模型**：无需预定义模式，适合快速迭代开发
3. **良好的水平扩展能力**：通过分片机制支持大规模数据
4. **JSON格式原生支持**：与前端数据交换更加自然
5. **嵌套文档支持**：可以更自然地表达复杂关系，减少关联查询
6. **地理空间索引**：原生支持地理位置查询，适合知识地图功能
7. **丰富的查询功能**：聚合管道提供强大的数据处理能力

#### 挑战与局限性
1. **事务支持有限**：虽然MongoDB 4.0+支持多文档事务，但性能和功能不如MySQL成熟
2. **连接查询效率**：对于复杂的关系查询，MongoDB的$lookup性能不如SQL的JOIN操作
3. **存储空间消耗**：文档重复存储字段名可能导致更高的存储开销
4. **成熟度**：在某些特定场景下，MySQL的工具生态和最佳实践更为成熟
5. **强一致性**：在需要强一致性的场景下，关系型数据库可能更有优势
6. **复杂查询优化**：某些复杂SQL查询在MongoDB中实现可能较为繁琐

### 适用场景分析

#### 适合MongoDB完全替代的场景
1. **原型开发阶段**：数据模型频繁变化，需要快速迭代
2. **数据结构以文档为主**：如知识点内容、用户笔记等
3. **读操作远多于写操作**：MongoDB在读性能上有优势
4. **需要高度扩展性**：预计用户和数据量会快速增长
5. **开发团队更熟悉NoSQL**：可以提高开发效率

#### 不建议完全替代的场景
1. **核心业务需要ACID事务**：如支付、积分等敏感操作
2. **复杂报表和分析查询**：需要大量JOIN和复杂SQL功能
3. **数据一致性要求极高**：关键业务数据不容许任何不一致
4. **团队对SQL经验丰富**：学习成本和迁移风险较高

### 混合方案建议

基于上述分析，推荐一个折中的混合方案：

1. **MongoDB作为主要存储**：
   - 知识结构数据（树、地图、球）
   - 用户学习内容和笔记
   - 学习记录和活动日志
   - 社区内容和互动数据

2. **保留MySQL用于**：
   - 用户核心账户信息（认证、权限）
   - 交易和支付相关数据
   - 需要强事务保证的业务逻辑
   - 复杂报表和分析查询

### 实施路径

如果决定尝试MongoDB替代MySQL，建议采取以下实施路径：

1. **阶段一**：在非核心模块先试点使用MongoDB（如知识树模块）
2. **阶段二**：评估性能和开发效率，确认是否继续扩大应用范围
3. **阶段三**：根据实际情况，逐步将更多功能迁移到MongoDB
4. **阶段四**：保留MySQL仅用于特定场景，或完全迁移到MongoDB

## MongoDB vs Neo4j 分析

### 6.1 MongoDB存储知识树的优势

#### 6.1.1 技术优势
1. **文档模型灵活性**：
   - 节点属性可以动态扩展
   - 支持嵌套结构存储复杂关系
   - 无需预定义schema

2. **查询性能**：
   - 单文档查询性能优秀
   - 支持复合索引优化查询
   - 聚合管道功能强大

3. **开发效率**：
   - 与应用代码集成简单
   - JSON格式天然匹配
   - 学习成本低

4. **运维成本**：
   - 统一数据库技术栈
   - 减少系统复杂度
   - 降低维护成本

#### 6.1.2 实现策略
1. **树结构存储**：
   - 使用parentNodeId和childrenNodeIds表示父子关系
   - path数组存储从根到当前节点的完整路径
   - level字段标识节点层级

2. **关系查询优化**：
   - 通过索引优化父子节点查询
   - 使用聚合管道实现复杂关系查询
   - 缓存常用的树结构查询结果

3. **数据一致性**：
   - 使用事务保证关联操作的原子性
   - 实现乐观锁防止并发更新冲突
   - 定期校验数据完整性

### 6.2 与Neo4j的对比

| 特性 | MongoDB | Neo4j | 选择理由 |
|------|---------|-------|----------|
| 图查询能力 | 中等（聚合管道） | 优秀（Cypher） | 当前需求复杂度适中 |
| 开发复杂度 | 低 | 中等 | 团队熟悉度高 |
| 运维成本 | 低 | 高 | 统一技术栈 |
| 扩展性 | 优秀 | 良好 | 支持水平扩展 |
| 数据模型灵活性 | 优秀 | 中等 | 需求变化频繁 |
| 性能（简单查询） | 优秀 | 良好 | 大部分是简单查询 |
| 性能（复杂关系） | 良好 | 优秀 | 复杂关系查询较少 |

### 6.3 MongoDB实现复杂关系查询

#### 6.3.1 查找子树
```javascript
// 查找某节点的所有子节点
db.knowledge_nodes.find({
  "treeId": 1001,
  "path": { $regex: "^.*,js_001,.*$" }
})
```

#### 6.3.2 查找相关节点
```javascript
// 聚合查询相关节点
db.knowledge_nodes.aggregate([
  { $match: { "nodeId": "js_001" } },
  { $lookup: {
      from: "knowledge_nodes",
      localField: "relatedNodeIds",
      foreignField: "nodeId",
      as: "relatedNodes"
  }}
])
```

#### 6.3.3 路径查询
```javascript
// 查找两个节点之间的路径
db.knowledge_nodes.aggregate([
  { $match: { "nodeId": { $in: ["js_001", "react_001"] } } },
  { $project: { "nodeId": 1, "path": 1 } }
])
```

### 结论

当前为项目初期，需要快速迭代，暂时选用mongo，后续涉及支付等一致性要求较高的场景再进行数据迁移
